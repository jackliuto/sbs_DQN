///////////////////////////////////////////////////////////////////////////////
//
// A multi-UAV problem where a group of UAVs have to reach goal positions in
// in the 3d Space.
//
///////////////////////////////////////////////////////////////////////////////

domain kinematic_UAVs_dis{

types {
    aircraft : object;
};

pvariables {

    GRAVITY : { non-fluent, real, default = 9.8};

    // Bounds on the position of the aircraft
    MIN_X : { non-fluent, real, default = -50000.0};
    MAX_X : { non-fluent, real, default = 50000.0};
    MIN_Y : { non-fluent, real, default = -50000.0};
    MAX_Y : { non-fluent, real, default = 50000.0};
    MIN_Z : { non-fluent, real, default = -50000.0};
    MAX_Z : { non-fluent, real, default = 50000.0};

    SCALE_FACTOR  : { non-fluent, real, default = 0.1 };          // time scale factor for dynamic equations
    VEL_REG     : {non-fluent, real, default = 0.001};            // regularizatino factor when dividing by zero velocity

    // bounds on actions
    MIN_ACC(aircraft) : {non-fluent, int, default = -1};
    MAX_ACC(aircraft) : {non-fluent, int, default = 1};
    MIN_DELTA_PHI(aircraft) : {non-fluent, int, default = -1};
    MAX_PHI(aircraft) : {non-fluent, int, default = 1};
    MIN_DELTA_THETA(aircraft) : {non-fluent, int, default = -1};
    MAX_DELTA_THETA(aircraft) : {non-fluent, int, default = 1};

    // goal position
    GOAL_X(aircraft) : {non-fluent, real, default = 100.0};
    GOAL_Y(aircraft) : {non-fluent, real, default = 100.0};
    GOAL_Z(aircraft) : {non-fluent, real, default = 100.0};

    // States
    // Cartesian Coordinates
    pos_x(aircraft) : { state-fluent, real, default = 0.0 }; // X axis coordinate
    pos_y(aircraft) : { state-fluent, real, default = 0.0 }; // Y axis coordinate
    pos_z(aircraft) : { state-fluent, real, default = 0.0 }; // Z axis coordinate
    // Angles
    theta(aircraft) : { state-fluent, real, default = 0.0 };  // pitch
    phi(aircraft) : { state-fluent, real, default = 0.0 };    // roll
    psi(aircraft) : { state-fluent, real, default = 0.0 };    // yaw
    // velocity
    vel(aircraft) : { state-fluent, real, default = 1.0 }; // velocity in the direction of the nose

    // actions
    set_acc(aircraft)  :  { action-fluent, bool, default = false };
    set_phi(aircraft)  :  { action-fluent, bool, default = false };
    set_theta(aircraft)  :  { action-fluent, bool, default = false };
   
};

cpfs {

    // position changes for each time step
    pos_x'(?a) = pos_x(?a) + SCALE_FACTOR * vel(?a) * cos[psi(?a)];

    pos_y'(?a) = pos_y(?a) + SCALE_FACTOR * vel(?a) * sin[psi(?a)];

    pos_z'(?a) = pos_z(?a) + SCALE_FACTOR * vel(?a) * sin[theta(?a)];

    // velocity
    vel'(?a) = vel(?a) + SCALE_FACTOR * if (set_acc(?a)) then 1.0 else 0;

    // angle changes
    phi'(?a) = phi(?a) + SCALE_FACTOR * if (set_phi(?a)) then 1.0 else 0;

    theta'(?a) = theta(?a) + SCALE_FACTOR * if (set_theta(?a)) then 1.0 else 0;

    psi'(?a) = psi(?a) + SCALE_FACTOR * (tan[phi(?a)] / (vel(?a)+VEL_REG)) * GRAVITY;

};

reward = -sum_{?a : aircraft} [abs[pos_x(?a) - GOAL_X(?a)] 
                               + abs[pos_y(?a) - GOAL_Y(?a)]
                               + abs[pos_z(?a) - GOAL_Z(?a)]
                                ];

state-invariants {

};

action-preconditions {

};

}